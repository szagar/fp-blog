{
  
    
        "post0": {
            "title": "Interview Preperation",
            "content": "Dynamic Programming . leetcode | .",
            "url": "https://szagar.github.io/fp-blog/job/interview/notes/2022/06/09/interview_prep.html",
            "relUrl": "/job/interview/notes/2022/06/09/interview_prep.html",
            "date": " • Jun 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "House_project_ideas",
            "content": ". .",
            "url": "https://szagar.github.io/fp-blog/2022/06/08/house_project_ideas.html",
            "relUrl": "/2022/06/08/house_project_ideas.html",
            "date": " • Jun 8, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Doc1",
            "content": "",
            "url": "https://szagar.github.io/fp-blog/2022/06/08/Doc1.html",
            "relUrl": "/2022/06/08/Doc1.html",
            "date": " • Jun 8, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Setup Notes",
            "content": "Jupyter . add kernel python -m ipykernel install --user --name=myenv | . nbdev . setup repo via template | clone repo | create venv | add kernel to jupyter | in jupyter terminal: pip install nbdev | edit settings.ini # lib_name = your_project_name # repo_name = name of github repo # user = your_github_username # description = A description of your project # keywords = some keywords # author = Your Name # author_email = email@example.com # copyright = Your Name or Company Name # branch = The default branch of your GitHub repo (usually either master or main) . | install git hooks, from project folder: nbdev_install_git_hooks | start jupyter lab, open 00_core.ipynb | add code, examples, test and markdown headings | Build lib (create the python module): nbdev_build_lib | create your documentation home page and README.md Edit index.ipynb edit import statement | edit install comment | add some examples | . | Build docs nbdev_build_docs | . | notes: . if notebook conflicts appear, run: nbdev_fix_merge filename.ipynb | if using a subdirectory to contain .ipynb files (nbs_path set to be anything other than the project root) either install these modules locally, as their relative import will take you beyond the top-level package, which can be done by running pip install -e . in the project root, to install the modules to your environment in editable mode. | or make a simlink in your notebook folder to the library folder, which can be done by running ln -s lib_path lib_name (adjust lib_path and lib_name to your use case). | . | .",
            "url": "https://szagar.github.io/fp-blog/development/notes/setup/2022/06/02/setup_notes.html",
            "relUrl": "/development/notes/setup/2022/06/02/setup_notes.html",
            "date": " • Jun 2, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "OOP Notes",
            "content": "OOP was developed to increase the reusability and maintainability of source code. . ArjanCodes OOP tips . You can combine FP with OOP | Make classes either Behavior Oriented or Data Oriented | Be careful with inheritance | Use dependency injection / dependcy inversion | Don&#39;t abuse Python&#39;s power features | Terms . polymorphism is the provision of a single interface to entities of different types | . Variables . Class variables – belong to the class as a whole; there is only one copy of each one | Instance variables or attributes – data that belongs to individual objects; every object has its own copy of each one | Member variables – refers to both the class and instance variables that are defined by a particular class | . Methods . Class methods – belong to the class as a whole and have access to only class variables and inputs from the procedure call | Instance methods – belong to individual objects, and have access to instance variables for the specific object they are called on, inputs, and class variables | . class-based programming . prototype-based . objects are the primary entities. No classes even exist. | . Data Abstraction . Encapsulation . Composition, inheritance, and delegation . Polymorphism . Open recursion . design patterns . can be used to refer to any general, repeatable, solution pattern to a commonly occurring problem in software design. Some of these commonly occurring problems have implications and solutions particular to object-oriented development . Creational patterns (5): Factory method pattern, Abstract factory pattern, Singleton pattern, Builder pattern, Prototype pattern | Structural patterns (7): Adapter pattern, Bridge pattern, Composite pattern, Decorator pattern, Facade pattern, Flyweight pattern, Proxy pattern | Behavioral patterns (11): Chain-of-responsibility pattern, Command pattern, Interpreter pattern, Iterator pattern, Mediator pattern, Memento pattern, Observer pattern, State pattern, Strategy pattern, Template method pattern, Visitor pattern | . SOLID is a mnemonic invented by Michael Feathers which spells out five software engineering design principles: . Single responsibility principle | Open/closed principle | Liskov substitution principle | Interface segregation principle | Dependency inversion principle | . Coupling refers to the interdependencies between modules. cohesion describes how related the functions within a single module are. Low cohesion implies that a given module performs tasks which are not very related to each other and hence can create problems as the module becomes large. . Low coupling often correlates with high cohesion, and vice versa. Low coupling is often thought to be a sign of a well-structured computer system and a good design, and when combined with high cohesion, supports the general goals of high readability and maintainability. . Disadvantages of tight coupling Tightly coupled systems tend to exhibit the following developmental characteristics, which are often seen as disadvantages:1. A change in one module usually forces a ripple effect of changes in other modules.1. Assembly of modules might require more effort and/or time due to the increased inter-module dependency. . A particular module might be harder to reuse and/or test because dependent modules must be included. | Low cohesion is associated with undesirable traits such as being difficult to maintain, test, reuse, or even understand. . Other . Protocol . class Payment(Protocol):&gt; def pay(self, amount: int) -&gt; None:&gt; ... . class PaypalPayment(Payment):def pay(self, amount: int) -&gt; None: print(f&quot;Paying {amount} using PayPal&quot;) . class StripePayment(Payment): def pay(self, amount: int) =&gt; None: print(f&quot;Paying {amount} using Stripe&quot;) . PAYMENT_METHODS: dict{PaymentMethod, type[Payment]] = { PaymentMethod.CARD: StipePayment, PaymentMethod.PAYPAL: PaypalPayment, } . def main(): my_payment = PAYMENT_METHODS[PaymentMethod.PAYPAL()) my_payment.pay(100) .",
            "url": "https://szagar.github.io/fp-blog/interview/oop/notes/2022/06/02/oop.html",
            "relUrl": "/interview/oop/notes/2022/06/02/oop.html",
            "date": " • Jun 2, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Dev Notes",
            "content": "Articles . strategy performance report | . BTA . BTA Community | BTA Portal | Research: COT Report Analysis.ipynb | .",
            "url": "https://szagar.github.io/fp-blog/development/notes/2022/06/02/dev_notes.html",
            "relUrl": "/development/notes/2022/06/02/dev_notes.html",
            "date": " • Jun 2, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Pandas Troubleshooting",
            "content": "*dtype warning .",
            "url": "https://szagar.github.io/fp-blog/pandas/python/2022/05/31/pandas.html",
            "relUrl": "/pandas/python/2022/05/31/pandas.html",
            "date": " • May 31, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Dev Tools",
            "content": "intra-day-vs-trade-close-to-close-drawdown | . Repos . fp-blog | . Python dev tools . json to pydantic | . nbdev . github page | install: pip install nbdev | Getting Started tutorial | example | docs | release notes | video | . | Play-by-play setup repo via template note: repo name will be used as Python project name, therefore lowercase w/ underscores | . | clone repo | . | . fastdoc . notebooks -&gt; books .",
            "url": "https://szagar.github.io/fp-blog/development/2022/05/31/dev_tools.html",
            "relUrl": "/development/2022/05/31/dev_tools.html",
            "date": " • May 31, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Markets",
            "content": "My stuff . TY has .D, 720-1400 | 24hr, 200-1600, | 120m, 240m | . | US 700-1600, 200-1600 | 80m | protective stop @ 2000 | . | . Easy . JPY | .",
            "url": "https://szagar.github.io/fp-blog/marketes/dnp/2022/05/31/Markets.html",
            "relUrl": "/marketes/dnp/2022/05/31/Markets.html",
            "date": " • May 31, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Bookmarks",
            "content": "My stuff . cv | fp-blog | github:fp-blog | github:cv | . Watch list . talk python git | . Reading list . How to setup google domain for github pages | . Blogs . bta | Automation Panda | Lj Miranda - data scientist blog setup | Arjan Codes | death.andgravity | . Articles . Pandas, loading csv | Pandas, time series | Mermaid Create diagrams quickly and effortlessly 1 | Mermaid Create diagrams quickly and effortlessly 2 link *the-concept-of-maximum-adverse-excursion-mae | The unreasonable effectiveness of f‍-‍strings and re.VERBOSE | . ### Articles //* [Mermaid_ Create diagrams quickly and effortlessly](https://szagar.github.io/assets/mermaid_create_diagrams_quickly_and_effortlessly.pdf) Reference . jekyll docs | minima/README.md | Collections | . | EasyLanguage Object Reference | . Systematic firms . Two Sigma | Renaissance | Bridgewater | D E Shaw &amp; Co | Marathon Asset Management | AQR Capital Management | Winton | Cow Harbor Systems | .",
            "url": "https://szagar.github.io/fp-blog/fastpages/jupyter/2022/05/30/Bookmarks.html",
            "relUrl": "/fastpages/jupyter/2022/05/30/Bookmarks.html",
            "date": " • May 30, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "ToDo",
            "content": "zts framwork . [x] time segments | [ ] add strategies to Striker | [ ] minute bars db | [ ] mae/mfe w/ minute bars db | [ ] python monte carlo | [ ] run dnp with short re-optimization periods | [ ] dnp on mongodb | . house . [x] basement stairs | [x] sprinklers | [ ] basement storage area | [ ] organize garage | [ ] organize work area | [ ] backyard spigot | [ ] pond waterfall | [ ] pond filter | .",
            "url": "https://szagar.github.io/fp-blog/notes/2022/05/29/ToDo.html",
            "relUrl": "/notes/2022/05/29/ToDo.html",
            "date": " • May 29, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Drawing Examples",
            "content": "table . Hea . . . . . . . | . | . | . | . | . # . # . Pyramid . Relationsip . First test .",
            "url": "https://szagar.github.io/fp-blog/2022/05/18/drawing-examples.html",
            "relUrl": "/2022/05/18/drawing-examples.html",
            "date": " • May 18, 2022"
        }
        
    
  
    
  
    
        ,"post13": {
            "title": "Using plotly.express",
            "content": "import plotly.express as px . fig = px.bar(x=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], y=[1, 3, 2]) fig.show() . df . date GOOG AAPL AMZN FB NFLX MSFT . 0 2018-01-01 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | . 1 2018-01-08 | 1.018172 | 1.011943 | 1.061881 | 0.959968 | 1.053526 | 1.015988 | . 2 2018-01-15 | 1.032008 | 1.019771 | 1.053240 | 0.970243 | 1.049860 | 1.020524 | . 3 2018-01-22 | 1.066783 | 0.980057 | 1.140676 | 1.016858 | 1.307681 | 1.066561 | . 4 2018-01-29 | 1.008773 | 0.917143 | 1.163374 | 1.018357 | 1.273537 | 1.040708 | . ... ... | ... | ... | ... | ... | ... | ... | . 100 2019-12-02 | 1.216280 | 1.546914 | 1.425061 | 1.075997 | 1.463641 | 1.720717 | . 101 2019-12-09 | 1.222821 | 1.572286 | 1.432660 | 1.038855 | 1.421496 | 1.752239 | . 102 2019-12-16 | 1.224418 | 1.596800 | 1.453455 | 1.104094 | 1.604362 | 1.784896 | . 103 2019-12-23 | 1.226504 | 1.656000 | 1.521226 | 1.113728 | 1.567170 | 1.802472 | . 104 2019-12-30 | 1.213014 | 1.678000 | 1.503360 | 1.098475 | 1.540883 | 1.788185 | . 105 rows × 7 columns . import plotly.express as px df = px.data.stocks() fig = px.line(df, x=&#39;date&#39;, y=&quot;GOOG&quot;) #fig.add_trace(go.Scatter(mode=&quot;markers&quot;, x=df[&quot;date&quot;], y=df[&quot;AAPL&quot;], name=&quot;AAPL&quot;)) fig.show() . import plotly.graph_objects as go import pandas as pd df = pd.read_csv(&#39;https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv&#39;) fig = go.Figure([go.Scatter(x=df[&#39;Date&#39;], y=df[&#39;AAPL.High&#39;])]) fig.show() . import plotly.express as px df = px.data.stocks(indexed=True)-1 fig = px.bar(df, x=df.index, y=&quot;GOOG&quot;) fig.show() . import plotly.express as px df = px.data.stocks(indexed=True)-1 fig = px.area(df, facet_col=&quot;company&quot;, facet_col_wrap=2) fig.show() . df . company GOOG AAPL AMZN FB NFLX MSFT . date . 2018-01-01 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 2018-01-08 0.018172 | 0.011943 | 0.061881 | -0.040032 | 0.053526 | 0.015988 | . 2018-01-15 0.032008 | 0.019771 | 0.053240 | -0.029757 | 0.049860 | 0.020524 | . 2018-01-22 0.066783 | -0.019943 | 0.140676 | 0.016858 | 0.307681 | 0.066561 | . 2018-01-29 0.008773 | -0.082857 | 0.163374 | 0.018357 | 0.273537 | 0.040708 | . ... ... | ... | ... | ... | ... | ... | . 2019-12-02 0.216280 | 0.546914 | 0.425061 | 0.075997 | 0.463641 | 0.720717 | . 2019-12-09 0.222821 | 0.572286 | 0.432660 | 0.038855 | 0.421496 | 0.752239 | . 2019-12-16 0.224418 | 0.596800 | 0.453455 | 0.104094 | 0.604362 | 0.784896 | . 2019-12-23 0.226504 | 0.656000 | 0.521226 | 0.113728 | 0.567170 | 0.802472 | . 2019-12-30 0.213014 | 0.678000 | 0.503360 | 0.098475 | 0.540883 | 0.788185 | . 105 rows × 6 columns . import plotly.express as px df = px.data.stocks() fig = px.line(df, x=&quot;date&quot;, y=df.columns, hover_data={&quot;date&quot;: &quot;|%B %d, %Y&quot;}, title=&#39;custom tick labels&#39;) fig.update_xaxes( dtick=&quot;M1&quot;, tickformat=&quot;%b n%Y&quot;) fig.show() . import sys sys.executable . Dash . import plotly.graph_objects as go # or plotly.express as px fig = go.Figure() # or any Plotly Express function e.g. px.bar(...) # fig.add_trace( ... ) # fig.update_layout( ... ) import dash import dash_core_components as dcc #import dash_html_components as html from dash import html app = dash.Dash() app.layout = html.Div([ dcc.Graph(figure=fig) ]) #app.run_server(debug=True, use_reloader=False) # Turn off reloader if inside Jupyter app.run_server(debug=True, use_reloader=False) # Turn off reloader if inside Jupyter .",
            "url": "https://szagar.github.io/fp-blog/2022/05/12/plotly_examples.html",
            "relUrl": "/2022/05/12/plotly_examples.html",
            "date": " • May 12, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://szagar.github.io/fp-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post15": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://szagar.github.io/fp-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://szagar.github.io/fp-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "",
          "content": "Overview . section 1 .",
          "url": "https://szagar.github.io/fp-blog/overview.html",
          "relUrl": "/overview.html",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://szagar.github.io/fp-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}