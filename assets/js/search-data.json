{
  
    
        "post0": {
            "title": "Using plotly.express",
            "content": "import plotly.express as px . fig = px.bar(x=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], y=[1, 3, 2]) fig.show() . df . date GOOG AAPL AMZN FB NFLX MSFT . 0 2018-01-01 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | . 1 2018-01-08 | 1.018172 | 1.011943 | 1.061881 | 0.959968 | 1.053526 | 1.015988 | . 2 2018-01-15 | 1.032008 | 1.019771 | 1.053240 | 0.970243 | 1.049860 | 1.020524 | . 3 2018-01-22 | 1.066783 | 0.980057 | 1.140676 | 1.016858 | 1.307681 | 1.066561 | . 4 2018-01-29 | 1.008773 | 0.917143 | 1.163374 | 1.018357 | 1.273537 | 1.040708 | . ... ... | ... | ... | ... | ... | ... | ... | . 100 2019-12-02 | 1.216280 | 1.546914 | 1.425061 | 1.075997 | 1.463641 | 1.720717 | . 101 2019-12-09 | 1.222821 | 1.572286 | 1.432660 | 1.038855 | 1.421496 | 1.752239 | . 102 2019-12-16 | 1.224418 | 1.596800 | 1.453455 | 1.104094 | 1.604362 | 1.784896 | . 103 2019-12-23 | 1.226504 | 1.656000 | 1.521226 | 1.113728 | 1.567170 | 1.802472 | . 104 2019-12-30 | 1.213014 | 1.678000 | 1.503360 | 1.098475 | 1.540883 | 1.788185 | . 105 rows × 7 columns . import plotly.express as px df = px.data.stocks() fig = px.line(df, x=&#39;date&#39;, y=&quot;GOOG&quot;) #fig.add_trace(go.Scatter(mode=&quot;markers&quot;, x=df[&quot;date&quot;], y=df[&quot;AAPL&quot;], name=&quot;AAPL&quot;)) fig.show() . import plotly.graph_objects as go import pandas as pd df = pd.read_csv(&#39;https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv&#39;) fig = go.Figure([go.Scatter(x=df[&#39;Date&#39;], y=df[&#39;AAPL.High&#39;])]) fig.show() . import plotly.express as px df = px.data.stocks(indexed=True)-1 fig = px.bar(df, x=df.index, y=&quot;GOOG&quot;) fig.show() . import plotly.express as px df = px.data.stocks(indexed=True)-1 fig = px.area(df, facet_col=&quot;company&quot;, facet_col_wrap=2) fig.show() . df . company GOOG AAPL AMZN FB NFLX MSFT . date . 2018-01-01 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 2018-01-08 0.018172 | 0.011943 | 0.061881 | -0.040032 | 0.053526 | 0.015988 | . 2018-01-15 0.032008 | 0.019771 | 0.053240 | -0.029757 | 0.049860 | 0.020524 | . 2018-01-22 0.066783 | -0.019943 | 0.140676 | 0.016858 | 0.307681 | 0.066561 | . 2018-01-29 0.008773 | -0.082857 | 0.163374 | 0.018357 | 0.273537 | 0.040708 | . ... ... | ... | ... | ... | ... | ... | . 2019-12-02 0.216280 | 0.546914 | 0.425061 | 0.075997 | 0.463641 | 0.720717 | . 2019-12-09 0.222821 | 0.572286 | 0.432660 | 0.038855 | 0.421496 | 0.752239 | . 2019-12-16 0.224418 | 0.596800 | 0.453455 | 0.104094 | 0.604362 | 0.784896 | . 2019-12-23 0.226504 | 0.656000 | 0.521226 | 0.113728 | 0.567170 | 0.802472 | . 2019-12-30 0.213014 | 0.678000 | 0.503360 | 0.098475 | 0.540883 | 0.788185 | . 105 rows × 6 columns . import plotly.express as px df = px.data.stocks() fig = px.line(df, x=&quot;date&quot;, y=df.columns, hover_data={&quot;date&quot;: &quot;|%B %d, %Y&quot;}, title=&#39;custom tick labels&#39;) fig.update_xaxes( dtick=&quot;M1&quot;, tickformat=&quot;%b n%Y&quot;) fig.show() . import sys sys.executable . Dash . import plotly.graph_objects as go # or plotly.express as px fig = go.Figure() # or any Plotly Express function e.g. px.bar(...) # fig.add_trace( ... ) # fig.update_layout( ... ) import dash import dash_core_components as dcc #import dash_html_components as html from dash import html app = dash.Dash() app.layout = html.Div([ dcc.Graph(figure=fig) ]) #app.run_server(debug=True, use_reloader=False) # Turn off reloader if inside Jupyter app.run_server(debug=True, use_reloader=False) # Turn off reloader if inside Jupyter .",
            "url": "https://szagar.github.io/fp-blog/2022/05/12/plotly_examples.html",
            "relUrl": "/2022/05/12/plotly_examples.html",
            "date": " • May 12, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "%load_ext autoreload %autoreload 2 . import altair . from trade_list_tools import TradeListTools . import glob from IPython.display import clear_output . !ls -ltr /Users/szagar/work/zts/bta_data_dev/ts_data/backtests/trades/s5094_bt15619_@MES_bpv5.csv . tlt = TradeListTools() cnt = 0 for fn in glob.glob(&#39;/Users/szagar/work/zts/bta_data_dev/ts_data/backtests/trades/*bpv*.csv&#39;): cnt += 1 print(fn) df = tlt.load_trades(fn) #tlt.info() df[[&#39;cum_pnl&#39;,&#39;max_pnl&#39;]].plot(figsize=(8,4)) plt.text(100,100,&#39;sample text&#39;) plt.show() inp = input(&#39;hit enter&#39;) clear_output(wait=True) if cnt == 5: break . from tkinter import * #Create an instance of Tkinter frame or window win= Tk() #Set the geometry of tkinter frame win.geometry(&quot;750x250&quot;) def callback(): Label(win, text=&quot;Hello World!&quot;, font=(&#39;Century 20 bold&#39;)).pack(pady=4) #Create a Label and a Button widget btn=Button(win, text=&quot;Press Enter&quot;, command= callback) btn.pack(ipadx=10) win.bind(&#39;&lt;Return&gt;&#39;,lambda event:callback()) win.mainloop() . trades_file = &#39;/Users/szagar/work/zts/bta_data_dev/ts_data/backtests/BOS_613_MAE@NQ_bpv20_trades.csv&#39; bars_file = &#39;/Users/szagar/work/zts/bta_data_dev/ts_data/bars/@NQ.csv&#39; !ls -lt /Users/szagar/work/zts/bta_data_dev/ts_data/bars . total 106480 -rw-r--r-- 1 szagar staff 4472584 Apr 22 06:44 @EC.csv -rw-r--r-- 1 szagar staff 4505479 Apr 18 08:52 @MNQ.csv -rw-r--r-- 1 szagar staff 3992285 Apr 18 08:50 @CL.csv -rw-r--r-- 1 szagar staff 4506759 Apr 18 08:49 @NQ.csv -rw-r--r-- 1 szagar staff 4091690 Apr 18 08:47 @EMD.csv -rw-r--r-- 1 szagar staff 4301890 Apr 18 08:42 @QM.csv -rw-r--r-- 1 szagar staff 4418386 Apr 18 08:40 @ES.csv -rw-r--r-- 1 szagar staff 3777949 Apr 13 21:38 @YM.csv -rw-r--r-- 1 szagar staff 4166280 Apr 6 13:55 @GC.csv -rw-r--r-- 1 szagar staff 3777843 Apr 4 22:36 @MYM.csv -rw-r--r-- 1 szagar staff 4417057 Mar 30 06:31 @MES.csv -rw-r--r-- 1 szagar staff 4158997 Mar 27 10:23 @M2K.csv -rw-r--r-- 1 szagar staff 3906149 Mar 26 13:57 @NG.csv . tlt = TradeListTools() . Load trades . df = tlt.load_trades(trades_file) tlt.info() . r1 = 8860.0 (MaxLoss100) . pnt_mulipler = 20.0 . net profit = 52,985.0 . profit factor = 1.25 . win percent = 56.55 . expectancy(R) = 0 . expectancy($) = 60.63 . R max = 0.58 . R min = -1.0 . number trades = 909 . number winners = 514 . number losers = 395 . average trade = 58.29 . average win = 520.5 . average loss = -537.9 . max win = 5130.0 . max loss = -8860.0 . win/loss ratio = 0.97 . sqn = 1.9 . sqn100 = 1.11 . pnl_sqn = 1.9 . pnl_sqn100 = 1.11 . drawdown = -19170 . np / dd = 2.8 . pareto = 40.08% of winners responsible for 80% of profits . pareto_loss = 97.97% of losers responsible for 80% of loses . print(f&quot;mean R = {df[&#39;Rmult&#39;].mean()}&quot;) print(f&quot;max R = {df[&#39;Rmult&#39;].max()}&quot;) print(f&quot;min R = {df[&#39;Rmult&#39;].min()}&quot;) df[&#39;Rmult&#39;].rolling(20).mean().plot() . mean R = 0.006578931030800597 max R = 0.5790067720090294 min R = -1.0 . &lt;AxesSubplot:xlabel=&#39;entry_ts&#39;&gt; . df[[&#39;cum_pnl&#39;,&#39;max_pnl&#39;,&#39;Rmult&#39;]].plot(figsize=(16,6)) . &lt;AxesSubplot:xlabel=&#39;entry_ts&#39;&gt; . df[[&#39;drawdown&#39;,&#39;cum_pnl&#39;,&#39;max_pnl&#39;]].plot(figsize=(16,4)) . &lt;AxesSubplot:xlabel=&#39;entry_ts&#39;&gt; . df[&#39;cum_pnl&#39;].rolling(20).mean().plot(figsize=(16,4)) . &lt;AxesSubplot:xlabel=&#39;entry_ts&#39;&gt; . Load bar data . bars_df = tlt.load_bars(bars_file) print(f&quot;{len(bars_df):,} bars&quot;) bars_df.head() . 77,229 bars . BarNum Open High Low Close . 2009-01-06 09:00:00 1 | 1302.50 | 1308.50 | 1293.25 | 1306.00 | . 2009-01-06 10:00:00 2 | 1306.00 | 1309.00 | 1292.25 | 1295.00 | . 2009-01-06 11:00:00 3 | 1295.25 | 1298.25 | 1289.50 | 1296.50 | . 2009-01-06 12:00:00 4 | 1296.75 | 1308.00 | 1295.25 | 1306.75 | . 2009-01-06 13:00:00 5 | 1306.75 | 1306.75 | 1295.75 | 1299.25 | . MAE / MFE . mae_df = tlt.set_max_excursions() mae_df.head() . entry_ts entry_px exit_ts exit_px StopPr MarkPos pnl TrRisk size symbol ATREnt CurrConv Rmult cum_pnl max_pnl drawdown pdHighestHigh pdLowestLow mae mfe . entry_ts . 2012-09-13 09:05:00 9/13/2012 9:05:00 | 2859.25 | 2012-09-13 13:25:00 | 2902.00 | 0.0 | 1 | 855.0 | 0.0 | 1 | @NQ | 2.850 | 1.0 | 0.096501 | 855.0 | 855.0 | 0.0 | 2894.75 | 2854.75 | -90.0 | 710.0 | . 2012-09-18 10:25:00 9/18/2012 10:25:00 | 2922.00 | 2012-09-18 13:25:00 | 2920.50 | 0.0 | 1 | -30.0 | 0.0 | 1 | @NQ | 4.225 | 1.0 | -0.003386 | 825.0 | 855.0 | -30.0 | 2922.75 | 2913.75 | -165.0 | 15.0 | . 2012-09-21 08:25:00 9/21/2012 8:25:00 | 2939.50 | 2012-09-21 13:25:00 | 2927.50 | 0.0 | 1 | -240.0 | 0.0 | 1 | @NQ | 3.150 | 1.0 | -0.027088 | 585.0 | 855.0 | -270.0 | 2940.50 | 2931.25 | -165.0 | 20.0 | . 2012-09-25 10:25:00 9/25/2012 10:25:00 | 2921.00 | 2012-09-25 13:25:00 | 2899.75 | 0.0 | 1 | -425.0 | 0.0 | 1 | @NQ | 4.375 | 1.0 | -0.047968 | 160.0 | 855.0 | -695.0 | 2921.75 | 2899.75 | -425.0 | 15.0 | . 2012-09-27 11:25:00 9/27/2012 11:25:00 | 2875.50 | 2012-09-27 13:25:00 | 2887.00 | 0.0 | 1 | 230.0 | 0.0 | 1 | @NQ | 7.025 | 1.0 | 0.025959 | 390.0 | 855.0 | -465.0 | 2886.50 | 2867.75 | -155.0 | 220.0 | . winner = mae_df[mae_df[&#39;pnl&#39;] &gt;= 0][[&#39;pnl&#39;,&#39;mae&#39;]] winner[&#39;winner&#39;] = True loser = mae_df[mae_df[&#39;pnl&#39;] &lt; 0][[&#39;pnl&#39;,&#39;mae&#39;]] loser[&#39;winner&#39;] = False winner[&#39;pnl&#39;] = abs(winner[&#39;pnl&#39;]) winner[&#39;mae&#39;] = abs(winner[&#39;mae&#39;]) loser[&#39;pnl&#39;] = abs(loser[&#39;pnl&#39;]) loser[&#39;mae&#39;] = abs(loser[&#39;mae&#39;]) #mae = winner.append(loser, ignore_index=True) #mae[&#39;pnl&#39;] = abs(mae[&#39;pnl&#39;]) #mae[&#39;mae&#39;] = abs(mae[&#39;mae&#39;]) #mae.sample(5) . winner.head() . pnl mae winner . entry_ts . 2012-09-13 09:05:00 855.0 | 90.0 | True | . 2012-09-27 11:25:00 230.0 | 155.0 | True | . 2012-10-16 07:25:00 400.0 | 225.0 | True | . 2012-11-01 09:25:00 310.0 | 80.0 | True | . 2012-11-06 11:05:00 20.0 | 65.0 | True | . nrow = 1 ncol = 2 fig, ax = plt.subplots(nrow, ncol) ax(1,1).scatter(x = winner[&#39;mae&#39;], y = winner[&#39;pnl&#39;], marker=&#39;o&#39;, color=&#39;green&#39;, s=20, label=&#39;Winners&#39;) ax(1,2).scatter(x = loser[&#39;mae&#39;], y = loser[&#39;pnl&#39;], marker=&#39;x&#39;, color=&#39;red&#39;, s=20, label=&#39;Losers&#39;) #df_list[count].plot(ax=axes[r,c]) &#39;&#39;&#39; #fig, ax = plt.subplots(figsize=(10, 6)) ax.scatter(x = winner[&#39;mae&#39;], y = winner[&#39;pnl&#39;], marker=&#39;o&#39;, color=&#39;green&#39;, s=20, label=&#39;Winners&#39;) ax.scatter(x = loser[&#39;mae&#39;], y = loser[&#39;pnl&#39;], marker=&#39;x&#39;, color=&#39;red&#39;, s=20, label=&#39;Losers&#39;) mae_pnl=winner[&#39;mae&#39;].max() ax.axvline(mae_pnl, color=&#39;grey&#39;, linestyle=&#39;--&#39;, alpha=0.5) mae_lt_pnl=winner[winner[&#39;pnl&#39;] &gt; winner[&#39;mae&#39;]][&#39;mae&#39;].max() ax.axvline(mae_lt_pnl, color=&#39;grey&#39;, linestyle=&#39;--&#39;, alpha=0.5) ax.axhline(tlt.avg_win_trade(), color=&#39;grey&#39;, linestyle=&#39;--&#39;, alpha=0.5) ax.axhline(tlt.avg_win_trade()+tlt.std_win_trade(), color=&#39;grey&#39;, linestyle=&#39;--&#39;, alpha=0.5) ax.axhline(tlt.avg_win_trade()+2*tlt.std_win_trade(), color=&#39;grey&#39;, linestyle=&#39;--&#39;, alpha=0.5) plt.plot([], [], &#39; &#39;, label=f&quot;Max winner MAE: {mae_pnl}&quot;) plt.plot([], [], &#39; &#39;, label=f&quot;Max MAE (pnl&gt;MAE): {mae_lt_pnl}&quot;) plt.xlabel(&quot;MAE&quot;) plt.ylabel(&quot;PnL&quot;) plt.legend() #plt.show() &#39;&#39;&#39; . NameError Traceback (most recent call last) /var/folders/wv/8lw0yw8n7pn2m9lmt7yw2drw0000gn/T/ipykernel_25809/1695785931.py in &lt;module&gt; 1 nrow = 1 2 ncol = 2 -&gt; 3 fig, ax = plt.subplots(nrow, ncol) 4 ax(1,1).scatter(x = winner[&#39;mae&#39;], y = winner[&#39;pnl&#39;], marker=&#39;o&#39;, color=&#39;green&#39;, s=20, label=&#39;Winners&#39;) 5 ax(1,2).scatter(x = loser[&#39;mae&#39;], y = loser[&#39;pnl&#39;], marker=&#39;x&#39;, color=&#39;red&#39;, s=20, label=&#39;Losers&#39;) NameError: name &#39;plt&#39; is not defined . R1 . tlt.help() . set_r1( value=&lt; int constant &gt; ) set_r1( MaxLoss ) set_r1( AvgLoss ) set_r1( MaxLoss100 ) set_r1( AvgLoss100 ) . tlt.set_r1(unit=&#39;MaxLoss&#39;) tlt.info() &#39;&#39;&#39; mean = 0.1423085234464236 std = 1.5395091563010361 cnt = 493 sqn = 2.05 &#39;&#39;&#39; &#39;&#39;&#39; in calc_sqn mean = 0.03159582999198075 std = 0.3418071412419514 cnt = 493 sqn = 2.05 &#39;&#39;&#39; . r1 = 537.5 (MaxLoss) . pnt_mulipler = 5.0 . net profit = 8,372.5 . profit factor = 1.3 . win percent = 52.54 . expectancy(R) = 0 . expectancy($) = 16.99 . R max = 2.61 . R min = -1.0 . number trades = 493 . number winners = 259 . number losers = 234 . average trade = 16.98 . average win = 140.14 . average loss = -119.34 . max win = 1402.5 . max loss = -537.5 . win/loss ratio = 1.17 . sqn = 2.05 . sqn100 = 1.91 . pnl_sqn = 2.05 . pnl_sqn100 = 1.91 . drawdown = -2147 . np / dd = 3.9 . pareto = 45.17% of winners responsible for 80% of profits . pareto_loss = 91.03% of losers responsible for 80% of loses . &#39; nin calc_sqn nmean = 0.03159582999198075 nstd = 0.3418071412419514 ncnt = 493 nsqn = 2.05 n&#39; . tlt.trades_df[&#39;drawdown&#39;].min() . tlt.trades_df[&#39;drawdown&#39;].abs().max() . tlt.set_r1(&#39;AvgLoss&#39;) . re-sampling data . #df.resample(rule=&#39;Q&#39;).mean() #df.resample(rule=&#39;BQ&#39;).mean() df.resample(rule=&#39;A&#39;).max().head() . def first_day(entry): return entry[0] df.resample(&#39;A&#39;).apply(first_day).head() . df[&#39;pnl&#39;].resample(&#39;M&#39;).sum().plot(kind=&#39;bar&#39;,figsize=(16,4)) . &lt;AxesSubplot:xlabel=&#39;entry_ts&#39;&gt; . Time Shifting . bars_df.head() . bars_df.head() bars_df.shift(periods=1).head() . Rolling and Expanding . import pandas as pd . bac_df = pd.read_csv(&#39;../../tests/data/BAC.csv&#39;,parse_dates=True,index_col=0) bac_df.head() . bac_df[&#39;Close 30 Day MA&#39;] = bac_df[&#39;Close&#39;].rolling(30).mean() bac_df.head(5) . bac_df[[&#39;Close 30 Day MA&#39;,&#39;Close&#39;]].plot(figsize=(16,6)) . bac_df[&#39;Close&#39;].expanding().mean().plot(figsize=(16,4)) . Bollinger Band example . bac_df[&#39;Close of 20 Day MA&#39;] = bac_df[&#39;Close&#39;].rolling(20).mean() # Upper = 20MA + 2*std(20) bac_df[&#39;Upper&#39;] = bac_df[&#39;Close of 20 Day MA&#39;] + 3 * (bac_df[&#39;Close&#39;].rolling(20).std()) # Lower = 20MA = 2*std(20) bac_df[&#39;Lower&#39;] = bac_df[&#39;Close of 20 Day MA&#39;] - 3 * (bac_df[&#39;Close&#39;].rolling(20).std()) bac_df[[&#39;Close&#39;,&#39;Close of 20 Day MA&#39;,&#39;Upper&#39;,&#39;Lower&#39;]].plot(figsize=(16,6)) . !head /Users/szagar/work/zts/bta_data_dev/ts_data/backtests/trades/s5030_bt15567_@MNQ_bars.csv . import pandas as pd . bars_df = pd.read_csv(bars_file,index_col=0,names=[&#39;bar&#39;,&#39;o&#39;,&#39;h&#39;,&#39;l&#39;,&#39;c&#39;,&#39;na&#39;]) bars_df = bars_df.drop(&#39;na&#39;,axis=1) bars_df . def set_r1(r1_param, df): if r1_param == &quot;MaxLoss&quot;: r = abs(df[df[&quot;pnl&quot;] &lt; 0][&quot;pnl&quot;].min()) elif r1_param == &quot;AvgLoss&quot;: r = abs(df[df[&quot;pnl&quot;] &lt; 0][&quot;pnl&quot;].mean()) elif r1_param == &quot;MaxLoss100&quot;: r = abs(df[df[&quot;pnl&quot;] &lt; 0][&quot;pnl&quot;].tail(100).min()) elif r1_param == &quot;AvgLoss100&quot;: r = abs(df[df[&quot;pnl&quot;] &lt; 0][&quot;pnl&quot;].tail(100).mean()) elif isinstance(r1_param, int): r = r1_param return int(r) print(set_r1(&#39;MaxLoss&#39;,df)) print(set_r1(&#39;AvgLoss&#39;,df)) print(set_r1(&#39;MaxLoss100&#39;,df)) print(set_r1(&#39;AvgLoss100&#39;,df)) . df[&quot;Rmult&quot;] = df[&quot;pnl&quot;] / set_r1(&#39;AvgLoss&#39;,df) df.sort_values(&#39;Rmult&#39;).tail(20) . def trades_df(self, r1_param=&quot;MaxLoss&quot;): cum_pnl = 0 trades = [] for elm in self.root.findall(&quot;./Trades/&quot;): a = {b.tag: b.text for b in elm.iter()} if a[&quot;Type&quot;] in (&quot;LExit&quot;, &quot;SExit&quot;): trade = self.process_exit(trade, a) cum_pnl += trade[&quot;pnl&quot;] trade[&quot;cum_pnl&quot;] = cum_pnl trades.append(trade) elif a[&quot;Type&quot;] in (&quot;Buy&quot;, &quot;Sell&quot;): trade = self.process_entry(a) else: print(f&quot;WARNING: WARNING: type: {a[&#39;Type&#39;]} Not Recognized&quot;) df = pd.DataFrame.from_dict(trades) ## add R1 multiplier column self.r1 = round(self.set_r1(r1_param, df), 2) df[&quot;Rmult&quot;] = df[&quot;pnl&quot;] / self.r1 self.pnt_mulipler = self.calc_pnt_multiplier(df) self.number_trades = len(df.index) self.sqn = self.calc_sqn(df) self.sqn100 = self.calc_sqn(df, 100) self.sqn_pnl = self.calc_sqn_pnl(df) self.sqn100_pnl = self.calc_sqn_pnl(df, 100) self.pareto = self.calc_pareto(df, percent_outcomes=80) self.pareto_loses = self.calc_pareto(df, percent_outcomes=80, winning=False) return df . def set_max_excursions(r1_param): t_df = self.trades_df(r1_param) b_df = self.bars_df() t_df[&#39;pdMaxClose&#39;] = 0.0 t_df[&#39;pdMinClose&#39;] = 0.0 t_df[&#39;pdMaxPrice&#39;] = 0.0 t_df[&#39;pdMinPrice&#39;] = 0.0 for i, row in t_df.iterrows(): entry_ts = row[&#39;entry_ts&#39;] exit_ts = row[&#39;exit_ts&#39;] max_close = b_df[(b_df.index&gt;=entry_ts) &amp; (b_df.index&lt;=exit_ts)][&#39;close&#39;].max() min_close = b_df[(b_df.index&gt;=entry_ts) &amp; (b_df.index&lt;=exit_ts)][&#39;close&#39;].min() max_px = b_df[(b_df.index&gt;=entry_ts) &amp; (b_df.index&lt;=exit_ts)][&#39;high&#39;].max() min_px = b_df[(b_df.index&gt;=entry_ts) &amp; (b_df.index&lt;=exit_ts)][&#39;low&#39;].min() t_df.at[i,&#39;pdMaxClose&#39;] = max_close t_df.at[i,&#39;pdMinClose&#39;] = min_close t_df.at[i,&#39;pdMaxPrice&#39;] = max_px t_df.at[i,&#39;pdMinPrice&#39;] = min_px t_df[&#39;entry_price&#39;] = t_df[&#39;entry_price&#39;].astype(float) t_df.loc[t_df[&#39;entry_action&#39;]==&#39;Buy&#39;,&#39;mae&#39;] = (t_df[&#39;entry_price&#39;]-t_df[&#39;pdMinPrice&#39;]) * float(self.pnt_mulipler) t_df.loc[t_df[&#39;entry_action&#39;]==&#39;Buy&#39;,&#39;mfe&#39;] = (t_df[&#39;pdMaxPrice&#39;]-t_df[&#39;entry_price&#39;]) * float(self.pnt_mulipler) t_df.loc[t_df[&#39;entry_action&#39;]==&#39;Short&#39;,&#39;mae&#39;] = (t_df[&#39;pdMinPrice&#39;]-t_df[&#39;entry_price&#39;]) * float(self.pnt_mulipler) t_df.loc[t_df[&#39;entry_action&#39;]==&#39;Short&#39;,&#39;mfe&#39;] = (t_df[&#39;entry_price&#39;]-t_df[&#39;pdMaxPrice&#39;]) * float(self.pnt_mulipler) return t_df . df . df_ts = df.copy() . import pandas as pd . dt_ind = pd.DatetimeIndex(df_ts[&#39;EnDT&#39;]) . df_ts.set_index(dt_ind,inplace=True) . df_ts.index.max() . td = df_ts.index.max() - df_ts.index.min() . df_ts.index.min() . df2 = df.copy() . df3 = df2.drop(&#39;entry_ts&#39;,axis=1,inplace=True) . df2.reset_index() . df2 = df2.head(5) . df2.reset_index(inplace=True) . df2 . df2.to_dict() .",
            "url": "https://szagar.github.io/fp-blog/2022/05/11/_trade_list_toolw-altair.html",
            "relUrl": "/2022/05/11/_trade_list_toolw-altair.html",
            "date": " • May 11, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://szagar.github.io/fp-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://szagar.github.io/fp-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://szagar.github.io/fp-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "",
          "content": "Overview . section 1 .",
          "url": "https://szagar.github.io/fp-blog/overview.html",
          "relUrl": "/overview.html",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://szagar.github.io/fp-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}